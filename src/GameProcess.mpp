module;

#include <windows.h>
#include <tlhelp32.h>
#include <psapi.h>

export module GameProcess;

import std;
import Error;
import Constants;
import Win32Utils;
import MemoryUtils;

using namespace std::literals;

export using PID = DWORD;

namespace ProcessError {
  inline auto cantGetProcessModuleEntries() noexcept -> decltype(auto) {
      const auto error = GetLastError();
      return std::unexpected<Error> { std::in_place,
                                      std::format("Can't get ModuleEntries from Handle: ({}) {}", error, formatMessage(error)) };
  }
  
  inline auto cantFindProcessModuleEntry() noexcept -> decltype(auto) {
      const auto error = GetLastError();
      return std::unexpected<Error> { std::in_place,
                                      std::format("Can't find ModuleEntry from Handle: ({}) {}", error, formatMessage(error)) };
  }
  
  inline auto cantGetProcessEntries() noexcept -> decltype(auto) {
      const auto error = GetLastError();
      return std::unexpected<Error> { std::in_place,
                                      std::format("Can't get ProcessEntries from Handle: ({}) {}", error, formatMessage(error)) };
  }
  
  inline auto invalidHandle() noexcept -> decltype(auto) {
      return std::unexpected<Error> { std::in_place, "Invalid Handle" };
  }

  inline auto genericError() noexcept -> decltype(auto) {
      const auto error = GetLastError();
      return std::unexpected<Error> { std::in_place,
                                      formatMessage(error) };
  }
};

export struct ProcessCtx {
  std::string name = "";
  PID pid = 0;
  XHANDLE handle = XHANDLE{INVALID_HANDLE_VALUE};
  std::uint64_t base_address = 0;
  bool disable_overlay = false;
  std::uint8_t bit_count = 64;
};

constexpr auto toLower(char c) -> char {
    if (c >= 'A' && c <= 'Z') return c + 32;
    return c;
}

constexpr auto toLower(std::string_view string) noexcept -> std::string {
    auto result = std::string { string };
    for (auto& c : result) c = toLower(c);
        return result;

    return result;
}

export auto findProcess(bool disable_overlay) noexcept -> Expected<ProcessCtx> {
  auto entry = PROCESSENTRY32{};
  ZeroMemory(&entry, sizeof(PROCESSENTRY32));
  entry.dwSize = sizeof(PROCESSENTRY32);

  auto found = false;
  auto ctx = ProcessCtx {.disable_overlay = disable_overlay};
  while(not found) {
      for(auto &&[_game_name, _] : ADDRESS_MAP) {
          auto game_name = std::string_view{std::data(_game_name), std::size(_game_name)};
          auto snapshot = XHANDLE{ CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0) };
          if(snapshot.get() == INVALID_HANDLE_VALUE) return ProcessError::invalidHandle();

          if(not Process32First(snapshot.get(), &entry))
              return ProcessError::cantGetProcessEntries();

          do {
              auto entry_name = toLower(entry.szExeFile);
              if(entry_name == toLower(game_name)) {
                ctx.pid = entry.th32ProcessID;
                ctx.name = game_name;
                found = true;
                break;
              }
          } while(Process32Next(snapshot.get(), &entry));
      }

      std::this_thread::sleep_for(500ms);
    
  };

  return ctx;
}

auto getBaseAddress(PID pid, std::string_view game_name) noexcept -> Expected<std::uintptr_t> {
  auto entry = MODULEENTRY32{0};
  ZeroMemory(&entry, sizeof(MODULEENTRY32));
  entry.dwSize = sizeof(MODULEENTRY32);
  
  auto snapshot = XHANDLE{ CreateToolhelp32Snapshot(TH32CS_SNAPMODULE | TH32CS_SNAPMODULE32, pid) };
  if(snapshot.get() == INVALID_HANDLE_VALUE) return ProcessError::invalidHandle();

  if (not Module32First(snapshot.get(), &entry)) 
        return ProcessError::cantGetProcessModuleEntries();

  do {
      auto entry_name = toLower(entry.szModule);
      if(entry_name == toLower(game_name))
        return std::bit_cast<std::uintptr_t>(entry.modBaseAddr);
  } while(Module32Next(snapshot.get(), &entry));

  return ProcessError::cantFindProcessModuleEntry();
}

export auto openProcessHandle(ProcessCtx &&ctx) noexcept -> Expected<ProcessCtx> {
  ctx.handle = XHANDLE{OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ | SYNCHRONIZE, false, ctx.pid)};
  if(ctx.handle.get() == INVALID_HANDLE_VALUE)
      return ProcessError::genericError();

  auto base_address = getBaseAddress(ctx.pid, toLower(ctx.name));
  if(not base_address.has_value()) return std::unexpected{ std::move(base_address).error() };

  ctx.base_address = *base_address;

  auto is_wow_64 = false;
  IsWow64Process(ctx.handle.get(), std::bit_cast<PBOOL>(&is_wow_64));

  ctx.bit_count = (is_wow_64) ? 64 : 32;
  
  return ctx;
}


