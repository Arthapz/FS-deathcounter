export module ArgsParser;

import std;

import Constants;
import Error;

using namespace std::literals;

constexpr auto split(std::string_view string, char delim) noexcept -> std::vector<std::string> {
    auto output = std::vector<std::string> {};
    auto first  = std::size_t { 0 };

    while (first < string.size()) {
        const auto second = string.find_first_of(delim, first);

        if (first != second) output.emplace_back(string.substr(first, second - first));

        if (second == std::string_view::npos) break;

        first = second + 1;
    }

    return output;
}

namespace ParseError {
    inline auto printHelp() noexcept -> decltype(auto) { return std::unexpected<Error>{ std::in_place, "", true }; }
    inline auto invalidArg(std::string_view arg) noexcept -> decltype(auto) {
        return std::unexpected<Error>{ std::in_place, std::format("Invalid argument, {}", arg), true };
    }
};

export auto parseArgs(std::span<const std::string_view> args) noexcept -> std::expected<bool, Error> {
     for(auto &&arg : args.subspan(1)) {
         if(arg == "--help" or arg == "-h")
             return ParseError::printHelp();
         else if(arg == "--cli" or arg == "-c")
             return true;
         else return ParseError::invalidArg(arg);
     }

     return false;
}

